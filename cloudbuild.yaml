# Cloud Build configuration for AI Legal Companion
# Multi-stage pipeline with testing, security scanning, and deployment

steps:
  # Step 1: Install dependencies and run tests for backend
  - name: 'python:3.11-slim'
    id: 'backend-test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd backend
        pip install -r requirements.txt -r requirements-dev.txt
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term
        python -m flake8 app/ --max-line-length=100
        python -m black --check app/
        python -m isort --check-only app/
    env:
      - 'ENVIRONMENT=test'
      - 'GOOGLE_CLOUD_PROJECT=$PROJECT_ID'

  # Step 2: Install dependencies and run tests for frontend
  - name: 'node:18-alpine'
    id: 'frontend-test'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd frontend
        npm ci
        npm run lint
        npm run type-check
        npm run test:unit
        npm run build
    env:
      - 'NODE_ENV=test'
      - 'VITE_API_URL=http://localhost:8000'

  # Step 3: Security scanning for backend
  - name: 'gcr.io/cloud-builders/docker'
    id: 'backend-security-scan'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd backend
        # Scan for vulnerabilities in Python dependencies
        pip install safety
        safety check -r requirements.txt --json > safety-report.json || true
        
        # Scan for secrets
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline || true

  # Step 4: Security scanning for frontend
  - name: 'node:18-alpine'
    id: 'frontend-security-scan'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd frontend
        npm audit --audit-level=high
        npx audit-ci --config audit-ci.json

  # Step 5: Build backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'backend-build'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/ai-legal-companion-backend:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/ai-legal-companion-backend:latest'
      - '--target'
      - 'production'
      - './backend'
    waitFor: ['backend-test', 'backend-security-scan']

  # Step 6: Build frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'frontend-build'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/ai-legal-companion-frontend:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/ai-legal-companion-frontend:latest'
      - '--target'
      - 'production'
      - '--build-arg'
      - 'VITE_API_URL=https://api.ai-legal-companion.com'
      - '--build-arg'
      - 'VITE_GOOGLE_CLOUD_PROJECT=$PROJECT_ID'
      - './frontend'
    waitFor: ['frontend-test', 'frontend-security-scan']

  # Step 7: Container security scanning
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'container-scan-backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud container images scan gcr.io/$PROJECT_ID/ai-legal-companion-backend:$COMMIT_SHA \
          --format='value(response.scan.analysisCompleted)' || true
    waitFor: ['backend-build']

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'container-scan-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud container images scan gcr.io/$PROJECT_ID/ai-legal-companion-frontend:$COMMIT_SHA \
          --format='value(response.scan.analysisCompleted)' || true
    waitFor: ['frontend-build']

  # Step 8: Push images to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'backend-push'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/ai-legal-companion-backend:$COMMIT_SHA'
    waitFor: ['container-scan-backend']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'frontend-push'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/ai-legal-companion-frontend:$COMMIT_SHA'
    waitFor: ['container-scan-frontend']

  # Step 9: Run integration tests
  - name: 'gcr.io/cloud-builders/docker-compose'
    id: 'integration-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Set up test environment
        export BACKEND_IMAGE=gcr.io/$PROJECT_ID/ai-legal-companion-backend:$COMMIT_SHA
        export FRONTEND_IMAGE=gcr.io/$PROJECT_ID/ai-legal-companion-frontend:$COMMIT_SHA
        
        # Run integration tests
        docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
        docker-compose -f docker-compose.test.yml down
    env:
      - 'GOOGLE_CLOUD_PROJECT=$PROJECT_ID'
    waitFor: ['backend-push', 'frontend-push']

  # Step 10: Deploy to staging environment
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-staging'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Deploy backend to Cloud Run staging
        gcloud run deploy ai-legal-companion-backend-staging \
          --image gcr.io/$PROJECT_ID/ai-legal-companion-backend:$COMMIT_SHA \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars ENVIRONMENT=staging,GOOGLE_CLOUD_PROJECT=$PROJECT_ID \
          --memory 2Gi \
          --cpu 2 \
          --concurrency 80 \
          --max-instances 10 \
          --tag staging
        
        # Deploy frontend to Cloud Run staging
        gcloud run deploy ai-legal-companion-frontend-staging \
          --image gcr.io/$PROJECT_ID/ai-legal-companion-frontend:$COMMIT_SHA \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --concurrency 1000 \
          --max-instances 5 \
          --tag staging
    waitFor: ['integration-tests']

  # Step 11: Run E2E tests against staging
  - name: 'mcr.microsoft.com/playwright:v1.40.0-focal'
    id: 'e2e-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd e2e
        npm ci
        npx playwright install
        
        # Get staging URLs
        export STAGING_FRONTEND_URL=$(gcloud run services describe ai-legal-companion-frontend-staging --region=us-central1 --format='value(status.url)')
        export STAGING_BACKEND_URL=$(gcloud run services describe ai-legal-companion-backend-staging --region=us-central1 --format='value(status.url)')
        
        # Run E2E tests
        npx playwright test --config=playwright.staging.config.ts
    env:
      - 'CI=true'
    waitFor: ['deploy-staging']

  # Step 12: Performance testing
  - name: 'loadimpact/k6:latest'
    id: 'performance-tests'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Get staging URL
        export STAGING_URL=$(gcloud run services describe ai-legal-companion-backend-staging --region=us-central1 --format='value(status.url)')
        
        # Run performance tests
        k6 run --env STAGING_URL=$STAGING_URL performance-tests/load-test.js
    waitFor: ['deploy-staging']

  # Step 13: Security testing
  - name: 'owasp/zap2docker-stable'
    id: 'security-tests'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get staging URL
        export STAGING_URL=$(gcloud run services describe ai-legal-companion-frontend-staging --region=us-central1 --format='value(status.url)')
        
        # Run OWASP ZAP security scan
        zap-baseline.py -t $STAGING_URL -J zap-report.json || true
    waitFor: ['deploy-staging']

  # Step 14: Deploy to production (only on main branch)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-production'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "Deploying to production..."
          
          # Deploy backend to production
          gcloud run deploy ai-legal-companion-backend \
            --image gcr.io/$PROJECT_ID/ai-legal-companion-backend:$COMMIT_SHA \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars ENVIRONMENT=production,GOOGLE_CLOUD_PROJECT=$PROJECT_ID \
            --memory 2Gi \
            --cpu 2 \
            --concurrency 80 \
            --min-instances 1 \
            --max-instances 100
          
          # Deploy frontend to production
          gcloud run deploy ai-legal-companion-frontend \
            --image gcr.io/$PROJECT_ID/ai-legal-companion-frontend:$COMMIT_SHA \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --concurrency 1000 \
            --min-instances 1 \
            --max-instances 50
          
          # Update traffic gradually (canary deployment)
          gcloud run services update-traffic ai-legal-companion-backend \
            --to-revisions LATEST=10 \
            --region us-central1
          
          gcloud run services update-traffic ai-legal-companion-frontend \
            --to-revisions LATEST=10 \
            --region us-central1
        else
          echo "Skipping production deployment for branch: $BRANCH_NAME"
        fi
    waitFor: ['e2e-tests', 'performance-tests', 'security-tests']

  # Step 15: Smoke tests on production
  - name: 'curlimages/curl:latest'
    id: 'production-smoke-tests'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          # Get production URLs
          export PROD_BACKEND_URL=$(gcloud run services describe ai-legal-companion-backend --region=us-central1 --format='value(status.url)')
          export PROD_FRONTEND_URL=$(gcloud run services describe ai-legal-companion-frontend --region=us-central1 --format='value(status.url)')
          
          # Basic health checks
          curl -f $PROD_BACKEND_URL/health || exit 1
          curl -f $PROD_FRONTEND_URL/health || exit 1
          
          echo "Production smoke tests passed"
        fi
    waitFor: ['deploy-production']

  # Step 16: Gradual traffic rollout (only on main branch)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'traffic-rollout'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "Starting gradual traffic rollout..."
          
          # Wait 5 minutes for monitoring
          sleep 300
          
          # Increase to 50% traffic
          gcloud run services update-traffic ai-legal-companion-backend \
            --to-revisions LATEST=50 \
            --region us-central1
          
          gcloud run services update-traffic ai-legal-companion-frontend \
            --to-revisions LATEST=50 \
            --region us-central1
          
          # Wait another 5 minutes
          sleep 300
          
          # Full rollout
          gcloud run services update-traffic ai-legal-companion-backend \
            --to-revisions LATEST=100 \
            --region us-central1
          
          gcloud run services update-traffic ai-legal-companion-frontend \
            --to-revisions LATEST=100 \
            --region us-central1
          
          echo "Traffic rollout completed"
        fi
    waitFor: ['production-smoke-tests']

  # Step 17: Cleanup old images
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'cleanup'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Keep only the last 10 images
        gcloud container images list-tags gcr.io/$PROJECT_ID/ai-legal-companion-backend \
          --limit=999999 --sort-by=TIMESTAMP \
          --format='get(digest)' | tail -n +11 | \
          xargs -I {} gcloud container images delete gcr.io/$PROJECT_ID/ai-legal-companion-backend@{} --quiet || true
        
        gcloud container images list-tags gcr.io/$PROJECT_ID/ai-legal-companion-frontend \
          --limit=999999 --sort-by=TIMESTAMP \
          --format='get(digest)' | tail -n +11 | \
          xargs -I {} gcloud container images delete gcr.io/$PROJECT_ID/ai-legal-companion-frontend@{} --quiet || true
    waitFor: ['traffic-rollout']

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  logging: CLOUD_LOGGING_ONLY
  env:
    - 'DOCKER_BUILDKIT=1'

# Timeout for the entire build
timeout: '3600s'

# Artifacts to store
artifacts:
  objects:
    location: 'gs://$PROJECT_ID-build-artifacts'
    paths:
      - 'backend/coverage.xml'
      - 'backend/safety-report.json'
      - 'e2e/test-results/**/*'
      - 'performance-tests/results/**/*'

# Substitutions
substitutions:
  _DEPLOY_REGION: 'us-central1'
  _SERVICE_NAME: 'ai-legal-companion'

# Available substitution variables:
# $PROJECT_ID - Google Cloud Project ID
# $COMMIT_SHA - Git commit SHA
# $BRANCH_NAME - Git branch name
# $TAG_NAME - Git tag name (if triggered by tag)
# $REPO_NAME - Repository name
# $SHORT_SHA - Short Git commit SHA