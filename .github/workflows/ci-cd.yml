# GitHub Actions CI/CD Pipeline for AI Legal Companion
# Comprehensive pipeline with testing, security, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  REGISTRY: gcr.io
  BACKEND_IMAGE: ai-legal-companion-backend
  FRONTEND_IMAGE: ai-legal-companion-frontend

jobs:
  # Backend testing and linting
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        cd backend
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Format check with black
      run: |
        cd backend
        black --check app/
    
    - name: Import sort check with isort
      run: |
        cd backend
        isort --check-only app/
    
    - name: Type check with mypy
      run: |
        cd backend
        mypy app/ --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend testing and linting
  frontend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint with ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Type check with TypeScript
      run: |
        cd frontend
        npm run type-check
    
    - name: Run unit tests
      run: |
        cd frontend
        npm run test:unit -- --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Build application
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend/dist/

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Python security scan with Safety
      run: |
        cd backend
        pip install safety
        safety check -r requirements.txt --json --output safety-report.json || true
    
    - name: Node.js security scan
      run: |
        cd frontend
        npm audit --audit-level=high
    
    - name: Secrets detection with GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.event_name != 'pull_request'
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        build-args: |
          VITE_API_URL=https://api.ai-legal-companion.com
          VITE_GOOGLE_CLOUD_PROJECT=${{ env.GOOGLE_CLOUD_PROJECT }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name != 'pull_request'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Run integration tests
      run: |
        export BACKEND_IMAGE=${{ needs.build-images.outputs.backend-image }}
        export FRONTEND_IMAGE=${{ needs.build-images.outputs.frontend-image }}
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit
      env:
        GOOGLE_CLOUD_PROJECT: ${{ env.GOOGLE_CLOUD_PROJECT }}

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Deploy to Cloud Run Staging
      run: |
        # Deploy backend
        gcloud run deploy ai-legal-companion-backend-staging \
          --image ${{ needs.build-images.outputs.backend-image }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars ENVIRONMENT=staging,GOOGLE_CLOUD_PROJECT=${{ env.GOOGLE_CLOUD_PROJECT }} \
          --memory 2Gi \
          --cpu 2 \
          --concurrency 80 \
          --max-instances 10
        
        # Deploy frontend
        gcloud run deploy ai-legal-companion-frontend-staging \
          --image ${{ needs.build-images.outputs.frontend-image }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --concurrency 1000 \
          --max-instances 5

  # E2E tests
  e2e-test:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: e2e/package-lock.json
    
    - name: Install Playwright
      run: |
        cd e2e
        npm ci
        npx playwright install --with-deps
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Run E2E tests
      run: |
        cd e2e
        export STAGING_FRONTEND_URL=$(gcloud run services describe ai-legal-companion-frontend-staging --region=us-central1 --format='value(status.url)')
        export STAGING_BACKEND_URL=$(gcloud run services describe ai-legal-companion-backend-staging --region=us-central1 --format='value(status.url)')
        npx playwright test --config=playwright.staging.config.ts
      env:
        CI: true
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: e2e/test-results/

  # Performance tests
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Run performance tests
      run: |
        export STAGING_URL=$(gcloud run services describe ai-legal-companion-backend-staging --region=us-central1 --format='value(status.url)')
        docker run --rm -v $PWD/performance-tests:/scripts loadimpact/k6:latest run --env STAGING_URL=$STAGING_URL /scripts/load-test.js

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images, integration-test, e2e-test, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Deploy to Cloud Run Production
      run: |
        # Deploy backend with canary (10% traffic)
        gcloud run deploy ai-legal-companion-backend \
          --image ${{ needs.build-images.outputs.backend-image }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars ENVIRONMENT=production,GOOGLE_CLOUD_PROJECT=${{ env.GOOGLE_CLOUD_PROJECT }} \
          --memory 2Gi \
          --cpu 2 \
          --concurrency 80 \
          --min-instances 1 \
          --max-instances 100 \
          --tag canary
        
        # Deploy frontend with canary (10% traffic)
        gcloud run deploy ai-legal-companion-frontend \
          --image ${{ needs.build-images.outputs.frontend-image }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --concurrency 1000 \
          --min-instances 1 \
          --max-instances 50 \
          --tag canary
        
        # Route 10% traffic to canary
        gcloud run services update-traffic ai-legal-companion-backend \
          --to-tags canary=10 \
          --region us-central1
        
        gcloud run services update-traffic ai-legal-companion-frontend \
          --to-tags canary=10 \
          --region us-central1
    
    - name: Production smoke tests
      run: |
        export PROD_BACKEND_URL=$(gcloud run services describe ai-legal-companion-backend --region=us-central1 --format='value(status.url)')
        export PROD_FRONTEND_URL=$(gcloud run services describe ai-legal-companion-frontend --region=us-central1 --format='value(status.url)')
        
        # Basic health checks
        curl -f $PROD_BACKEND_URL/health
        curl -f $PROD_FRONTEND_URL/health
    
    - name: Gradual traffic rollout
      run: |
        echo "Waiting 5 minutes for monitoring..."
        sleep 300
        
        # Increase to 50% traffic
        gcloud run services update-traffic ai-legal-companion-backend \
          --to-tags canary=50 \
          --region us-central1
        
        gcloud run services update-traffic ai-legal-companion-frontend \
          --to-tags canary=50 \
          --region us-central1
        
        echo "Waiting another 5 minutes..."
        sleep 300
        
        # Full rollout
        gcloud run services update-traffic ai-legal-companion-backend \
          --to-tags canary=100 \
          --region us-central1
        
        gcloud run services update-traffic ai-legal-companion-frontend \
          --to-tags canary=100 \
          --region us-central1

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Cleanup old images
      run: |
        # Keep only the last 10 images
        gcloud container images list-tags ${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.BACKEND_IMAGE }} \
          --limit=999999 --sort-by=TIMESTAMP \
          --format='get(digest)' | tail -n +11 | \
          xargs -I {} gcloud container images delete ${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.BACKEND_IMAGE }}@{} --quiet || true
        
        gcloud container images list-tags ${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.FRONTEND_IMAGE }} \
          --limit=999999 --sort-by=TIMESTAMP \
          --format='get(digest)' | tail -n +11 | \
          xargs -I {} gcloud container images delete ${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/${{ env.FRONTEND_IMAGE }}@{} --quiet || true