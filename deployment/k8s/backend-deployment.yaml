# Kubernetes deployment for AI Legal Companion Backend

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-legal-companion-backend
  namespace: ai-legal-companion
  labels:
    app: ai-legal-companion
    component: backend
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai-legal-companion
      component: backend
  template:
    metadata:
      labels:
        app: ai-legal-companion
        component: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ai-legal-companion-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      
      containers:
      - name: backend
        image: gcr.io/PROJECT_ID/ai-legal-companion-backend:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: GOOGLE_CLOUD_PROJECT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: google-cloud-project
        - name: VERTEX_AI_LOCATION
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: vertex-ai-location
        - name: STORAGE_BUCKET
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: storage-bucket
        - name: FIRESTORE_DATABASE
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: firestore-database
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: cors-origins
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: log-level
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: secret-key
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: redis-url
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: database-url
              optional: true
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        
        # Volume mounts
        volumeMounts:
        - name: tmp-volume
          mountPath: /app/tmp
        - name: logs-volume
          mountPath: /app/logs
        - name: google-cloud-key
          mountPath: /app/credentials
          readOnly: true
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
      - name: google-cloud-key
        secret:
          secretName: google-cloud-key
          optional: true
      
      # Pod disruption budget
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ai-legal-companion
                - key: component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname

---
# Service for backend
apiVersion: v1
kind: Service
metadata:
  name: ai-legal-companion-backend-service
  namespace: ai-legal-companion
  labels:
    app: ai-legal-companion
    component: backend
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: ai-legal-companion
    component: backend

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ai-legal-companion-backend-hpa
  namespace: ai-legal-companion
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ai-legal-companion-backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ai-legal-companion-backend-pdb
  namespace: ai-legal-companion
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: ai-legal-companion
      component: backend